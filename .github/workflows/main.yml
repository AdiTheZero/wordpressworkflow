name: MySQL and WordPress Docker Setup

on:
  push:
    branches:
      - main

jobs:
  setup-environment:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code (optional)
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up MySQL Docker container
      - name: Set up MySQL Docker container
        run: |
          # Pull the official MySQL Docker image
          docker pull mysql:8.0

          # Run MySQL container with environment variables for root password
          docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=root_password -d mysql:8.0

          # Wait for MySQL to be ready (give it some time to initialize)
          sleep 30

      # Step 3: Set up WordPress Docker container
      - name: Set up WordPress Docker container
        run: |
          # Pull the official WordPress Docker image
          docker pull wordpress:latest

          # Run WordPress container, linking it to MySQL container
          docker run --name wordpress-container --link mysql-container:mysql -e WORDPRESS_DB_HOST=mysql:3306 -e WORDPRESS_DB_NAME=wordpress -e WORDPRESS_DB_USER=root -e WORDPRESS_DB_PASSWORD=root_password -p 8080:80 -d wordpress:latest

          # Wait for WordPress to be ready (give it some time to initialize)
          sleep 90

      # Step 4: Verify WordPress is running
      - name: Verify WordPress is running
        run: |
          echo "Waiting for WordPress to start..."
          for i in {1..10}; do
            if curl --fail http://localhost:8080 | grep -q "WordPress"; then
              echo "WordPress is ready!"
              exit 0
            else
              echo "Retrying WordPress setup..."
              sleep 10
            fi
          done
          echo "WordPress setup failed!" && exit 1

      # Step 5: Show MySQL Databases and Generate Report
      - name: Show Databases and Generate Report
        run: |
          # Show MySQL databases and generate a report
          docker exec -i mysql-container mysql -u root -proot_password -e "SHOW DATABASES;" > databases_report.txt
          docker exec -i mysql-container mysql -u root -proot_password -e "SELECT * FROM test_db.users;" >> databases_report.txt

      # Step 6: Upload MySQL Report
      - name: Upload MySQL Report
        uses: actions/upload-artifact@v3
        with:
          name: mysql-report
          path: databases_report.txt
